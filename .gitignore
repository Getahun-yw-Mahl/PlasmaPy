# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

### Previous .gitignore

# Byte-compiled / optimized / DLL files
*$py.class
*.a
*.o
*.py[cod]
*.so
__pycache__/
MANIFEST

# Ignore .c files by default to avoid including generated code. If you want to
# add a non-generated .c extension, use `git add -f filename.c`.
*.c

# Distribution / packaging
*.egg
*.egg-info/
.eggs/
.installed.cfg
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
env/
lib/
lib64/
parts/
sdist/
var/
wheels/

# Downloaded files
src/plasmapy/utils/data/downloads/

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-delete-this-directory.txt
pip-log.txt

# Unit test / coverage reports
*,cover
.cache
.coverage
.coverage.*
.hypothesis/
.pytest_cache
.tox/
coverage.xml
htmlcov/
nosetests.xml

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py

# Flask stuff:
.webassets-cache
instance/

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/
docs/api
docs/gen_modules

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints
notebooks_for_proto

# pyenv
.python-version

# celery beat schedule file
celerybeat-schedule

# SageMath parsed files
*.sage.py

# dotenv
.env
env

# virtualenv
.venv
ENV/
venv/

# Spyder project settings
.spyderproject

# Rope project settings
.ropeproject

# VS code project settings
.vscode

# mkdocs documentation
/site

# Auxiliary files associated with emacs
*#
*.#
*~
.#*

# Auxiliary files associated with vim
*.swp
VIRTUAL/

# LaTeX and bibtex auxiliary files
*.aux
*.bbl
*.blg

# Documentation files
auto_examples
docs/about/_authors.rst
docs/changelog/index.rst
docs/contributing/_global_substitutions_table.rst
docs/notebooks/*.md

# Allow contributors to create a custom requirements.txt file for
# their own use.
requirements.txt

# Version file
_version.py
tags

# Miscellaneous files
cython_version.py
*debuglog*
.dmypy.json
.DS_Store
.idea/
.mypy_cache
.pyre
.pytype
cython_debug
dmypy.json
gitlog
monkeytype.sqlite3
node_modules
package-lock.json
Untitled*
untitled*

# The following file is created when running `nox -s requirements` in CI

.github/content/update-requirements-pr-body.md
